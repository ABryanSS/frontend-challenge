import '@iresine/helpers';

function setQueryDataNotCopy(queryClient, queryKey, data) {
  const oldOptions = queryClient.getDefaultOptions();
  queryClient.setDefaultOptions({ ...oldOptions,
    queries: { ...oldOptions.queries,
      structuralSharing: false
    }
  });
  const result = queryClient.setQueryData(queryKey, data);
  queryClient.setDefaultOptions(oldOptions);
  return result;
}

class IresineReactQuery {
  constructor(coreStore, queryClient) {
    this.queryClient = null;
    this.coreStore = null;
    this.store = new Map();
    this.settingQuery = false;

    this.subscribeRequests = queryEvent => {
      if ((queryEvent === null || queryEvent === void 0 ? void 0 : queryEvent.type) !== 'queryUpdated') {
        return;
      }

      const query = queryEvent.query;
      this.remove(query.queryHash);
      this.add(query.queryHash, query.state.data, query.queryKey);
    };

    this.coreStore = coreStore;
    this.queryClient = queryClient;
    queryClient.getQueryCache().findAll().forEach(query => {
      this.add(query.queryHash, query.state.data);
    });
    queryClient.getQueryCache().subscribe(this.subscribeRequests);
  }

  add(queryHash, data, queryKey) {
    const result = this.coreStore.parse(data);

    if (result === null) {
      return;
    }

    const {
      template,
      refs
    } = result;

    const listener = () => {
      const newData = this.coreStore.joinRefs(template, refs);
      this.settingQuery = true;
      setQueryDataNotCopy(this.queryClient, queryKey, newData);
      this.settingQuery = false;
    };

    this.coreStore.subscribe(refs.values(), listener);
    this.store.set(queryHash, {
      refs,
      template,
      listener
    });
  }

  remove(query) {
    if (!this.store.has(query)) {
      return;
    }

    const queryMapState = this.store.get(query);
    this.coreStore.unsubscribe([...queryMapState.refs.values()], queryMapState.listener);
    this.store.delete(query);
  }

}

export default IresineReactQuery;
export { IresineReactQuery };
