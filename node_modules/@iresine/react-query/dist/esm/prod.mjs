import"@iresine/helpers";class e{constructor(e,t){this.queryClient=null,this.coreStore=null,this.store=new Map,this.settingQuery=!1,this.subscribeRequests=e=>{if("queryUpdated"!==(null==e?void 0:e.type))return;const t=e.query;this.remove(t.queryHash),this.add(t.queryHash,t.state.data,t.queryKey)},this.coreStore=e,this.queryClient=t,t.getQueryCache().findAll().forEach((e=>{this.add(e.queryHash,e.state.data)})),t.getQueryCache().subscribe(this.subscribeRequests)}add(e,t,s){const r=this.coreStore.parse(t);if(null===r)return;const{template:i,refs:u}=r,o=()=>{const e=this.coreStore.joinRefs(i,u);this.settingQuery=!0,function(e,t,s){const r=e.getDefaultOptions();e.setDefaultOptions({...r,queries:{...r.queries,structuralSharing:!1}});const i=e.setQueryData(t,s);e.setDefaultOptions(r)}(this.queryClient,s,e),this.settingQuery=!1};this.coreStore.subscribe(u.values(),o),this.store.set(e,{refs:u,template:i,listener:o})}remove(e){if(!this.store.has(e))return;const t=this.store.get(e);this.coreStore.unsubscribe([...t.refs.values()],t.listener),this.store.delete(e)}}export default e;export{e as IresineReactQuery};
